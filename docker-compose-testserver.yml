version: "3.7"
services:
  web:
    image: ${CI_REGISTRY_IMAGE:-aaas}/${IMAGE:-web}:${SANITIZED_BRANCH:-latest}
    build:
      context: .
      dockerfile: ./docker/django/prod/Dockerfile.dev
      args:
        UID: ${UID:-10600}
        GID: ${GID:-10600}
        UNAME: ${UNAME:-aaas}
    container_name: web1
    ports:
      - "8000:80"
    hostname: web
    volumes:
      - media_volume:/home/aaas/media
      - ./:/home/aaas
    env_file:
      - ${ENV_FILE}
    depends_on:
      - postgres
      - redis
    networks:
      - aaas_net

  celery:
    image: ${CI_REGISTRY_IMAGE:-aaas}/${IMAGE:-celery}:${SANITIZED_BRANCH:-latest}
    build:
      context: .
      dockerfile: ./docker/django/prod/Dockerfile.celery
      args:
        UID: ${UID:-10600}
        GID: ${GID:-10600}
        UNAME: ${UNAME:-aaas}
    container_name: celery
    hostname: web
    volumes:
      - media_volume:/home/aaas/media
    env_file:
      - ${ENV_FILE}
    depends_on:
      - postgres
      - redis
    networks:
      - aaas_net
  postgres:
    image: postgres:13.6-alpine3.15
    container_name: postgres1
    hostname: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_recover:/var/lib/postgresql/data
    env_file:
      - ${ENV_FILE}
    networks:
      - aaas_net

  redis:
    image: ${CI_REGISTRY_IMAGE:-aaas}/${IMAGE:-redis}:${SANITIZED_BRANCH:-latest}
    build:
      context: .
      dockerfile: ./docker/redis/Dockerfile
    container_name: redis1
    hostname: redis
    volumes:
      - redis_data:/data
    networks:
      - aaas_net
  
  flask:
    image: ${CI_REGISTRY_IMAGE:-aaas}/${IMAGE:-flask}:${SANITIZED_BRANCH:-latest}
    build:
      context: .
      dockerfile: ./docker/flask/Dockerfile
      args:
        UID: ${UID:-10600}
        GID: ${GID:-10600}
        UNAME: ${UNAME:-aaas}
    container_name: flask1
    ports:
      - "5000:5000"
    hostname: flask1

    env_file:
      - ${ENV_FILE}
    depends_on:
      - postgres
      - redis
    networks:
      - aaas_net
networks:
  aaas_net:

volumes:
  postgres_data_recover:
  redis_data:
  media_volume:
